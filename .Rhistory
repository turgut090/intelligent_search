installed.packages('plotly')
library(plotly)
install.packages("plotly")
library(plotly)
data()
data(iris)
force(iris)
df <- data(iris)
df
df <- iris
df
lm("Petal.Length ~ Sepal.Length, Sepal.Width", data = iris)
lm("Petal.Length ~ Sepal.Width", data = iris)
gl(2, 8, labels = c("Control", "Treat"))
rep(2, 8, labels = c("Control", "Treat"))
rep(8, labels = c("Control", "Treat"))
rep(8, c("Control", "Treat"))
glm("Petal.Length ~ n       Sepal.Width", data = iris)
glm("Petal.Length ~ Sepal.Length+Sepal.Width", data = iris)
model <-  glm("Petal.Length ~ Sepal.Length+Sepal.Width", data = iris)
model.coefficients
model.coefficients
model$coefficients
model$call
model$formula
model %>% summary()
model <-  lm("Petal.Length ~ Sepal.Length+Sepal.Width", data = iris)
model$coefficients
model$formula
model %>% summary()
x <- iris$Sepal.Length
y <- iris$Sepal.Width
z <- iris$Petal.Length
model %>% predict(c(iris$Sepal.Length, iris$Sepal.Width))
model %>% predict(iris$Sepal.Length, iris$Sepal.Width)
model.predict(iris$Sepal.Length, iris$Sepal.Width)
model.predict(2,3)
model.response()
model.response(iris$Sepal.Length, iris$Sepal.Width)
model.response(c(iris$Sepal.Length, iris$Sepal.Width))
model.response(iris$Sepal.Length, iris$Sepal.Width)
model.response(iris %>% select(Sepal.Length, Sepal.Width))
iris %>% select(Sepal.Length, Sepal.Width)
model.response(iris %>% select(Sepal.Length, Sepal.Width))
model %>% response(iris %>% select(Sepal.Length, Sepal.Width))
model %>% predict(iris %>% select(Sepal.Length, Sepal.Width))
model <-  lm("Petal.Length ~ Sepal.Length+Sepal.Width",
data = iris) #building linear regression, 2 X, 1 Y
model %>% summary() # get details of model
model %>% predict(iris %>%
select(Sepal.Length, Sepal.Width))
x <- iris$Sepal.Length
x
type(x)
dtype(x)
preds <- model %>% predict(iris %>%
select(Sepal.Length, Sepal.Width))
preds %>% as.numeric()
preds <- preds %>% as.numeric()
preds
axx <- list(
nticks = 4,
range = c(-25,75)
)
axy <- list(
nticks = 4,
range = c(-25,75)
)
axz <- list(
nticks = 4,
range = c(0,50)
)
x <- 70*(runif(70, 0, 1))
y <- 55*(runif(70, 0, 1))
z <- 40*(runif(70, 0, 1))
fig <- plot_ly(x = ~x, y = ~y, z = ~z, type = 'mesh3d')
fig <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig
x <- iris$Sepal.Length
y <- iris$Sepal.Width
z <- iris$Petal.Length
preds <- model %>% predict(iris %>%
select(Sepal.Length, Sepal.Width))
preds <- preds %>% as.numeric()
fig <- plot_ly(x = ~x, y = ~y, z = ~z, type = 'mesh3d')
fig <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig
axx <- list(
nticks = 4,
range = c(-25,75)
)
axy <- list(
nticks = 4,
range = c(-25,75)
)
axz <- list(
nticks = 4,
range = c(0,50)
)
View(axx)
axx
fig
x <- iris$Sepal.Length
y <- iris$Sepal.Width
z <- iris$Petal.Length
preds <- model %>% predict(iris %>%
select(Sepal.Length, Sepal.Width))
fig
fig <- plot_ly(x = ~x, y = ~y, z = ~z, type = 'mesh3d')
fig
fig <- plot_ly(x = ~x, y = ~y, z = ~z, type = 'scatter')
fig
fig <- plot_ly(x = x, y = y, z = z, type = 'scatter')
fig
fig <- plot_ly(x = x, y = y, z = z)
fig
fig <- plot_ly(x = x, y = y, z = z) %>% add_surface()
fig
z %>% as.matrix()
fig <- plot_ly(x = x, y = y, z = z %>% as.matrix()) %>% add_surface()
fig
fig <- plot_ly(x = x, y = y, z = z) %>% add_surface(z%>% as.matrix())
fig
fig <- plot_ly(x = x, y = y, z = z)# %>% add_surface(z%>% as.matrix())
fig
x.min
x$min
x %>% min()
x %>% max()
seq(8,18)
seq(8,18, 0.1)
seq(x %>% max(), x %>% min(), 0.01)
x <- iris$Sepal.Length
seq(x %>% max(), x %>% min(), 0.01)
seq(x %>% max(), x %>% min(), by = 0.01)
seq(x %>% max(), x %>% min(), by = 0.1)
seq(x %>% min(), x %>% max(), by = 0.1)
seq(x %>% min(), x %>% max(), by = 0.01)
surfacey <- seqseq(y %>% min(), y %>% max(), by = 0.01)
surfacey <- seq(y %>% min(), y %>% max(), by = 0.01)
surfacez <- seq(z %>% min(), z %>% max(), by = 0.01)
surfacez
surfacez <- preds(z %>% min(), z %>% max(), by = 0.01)
surfacez <- seq(preds %>% min(), preds %>% max(), by = 0.01)
surfacex <- seq(x %>% min(), x %>% max(), by = len(x)/1000)
surfacey <- seq(y %>% min(), y %>% max(), by = len(y)/1000)
surfacez <- seq(preds %>% min(), preds %>% max(), by = len(preds)/1000)
len(x)
length(x)
surfacey <- seq(y %>% min(), y %>% max(), by = length(y)/1000)
surfacex <- seq(x %>% min(), x %>% max(), by = length(x)/1000)
surfacey <- seq(y %>% min(), y %>% max(), by = length(y)/1000)
surfacez <- seq(preds %>% min(), preds %>% max(), by = length(preds)/1000)
surfacez
surfacey
surfacex
surfacex <- seq(x %>% min(), x %>% max(), length.out = 1000)
surfacey <- seq(y %>% min(), y %>% max(), length.out = 1000)
surfacez <- seq(preds %>% min(), preds %>% max(), length.out = 1000)
surfacez
as.matrix(surfacex, surfacey, surfacey)
as.matrix(c(surfacex, surfacey, surfacey))
as.matrix(surfacex, surfacey, surfacey), ncol = 3)
as.matrix((surfacex, surfacey, surfacey), ncol = 3)
as.matrix(c(surfacex, surfacey, surfacey), ncol = 3)
c(surfacex, surfacey, surfacey)
as.data.frame(c(surfacex, surfacey, surfacey), ncol = 3)
as.data.frame(c(surfacex, surfacey, surfacey))
as.data.frame(surfacex, surfacey, surfacey)
df2 <- as.data.frame(surfacex, surfacey, surfacey)
as.data.frame(surfacex, surfacey, surfacey)
df2 <- as.data.frame(c(surfacex, surfacey, surfacey))
df2
df2 <- as.matrix(c(surfacex, surfacey, surfacey))
df2
df2 <- as.data.frame(surfacex)
df2
df2 %>% colnames()
df2$surfacey <- surfacey
df2$surfacey <- surfacey
df2$surfacez <- surfacez
df2 %>% colnames()
df2
fig <- plot_ly(x = x, y = y, z = z) %>% add_surface(df2)
fig
fig <- plot_ly(x = x, y = y, z = z)# %>% add_surface(df2)
fig
fig %>% add_surface(df2)
fig <- plot_ly(x = x, y = y, z = df2)# %>% add_surface(df2)
fig
fig <- plot_ly(x = x, y = y, z = z)# %>% add_surface(df2)
fig
fig <- plot_ly(x = x, y = y, z = z)# %>% add_surface(df2)
fig %>% add_surface(df2)
fig
fig <- plot_ly(showscale = FALSE)
fig <- fig %>% add_surface(z = ~z)
fig <- fig %>% add_surface(z = df2)
fig
fig <- fig %>% add_surface(z = df2 %>% as.matrix())
fig
fig <- plot_ly(showscale = FALSE)
fig <- fig %>% add_surface(z = df2 %>% as.matrix())
fig
fig <- plot_ly(x = x, y = y, z = z)# %>% add_surface(df2)
fig %>% add_surface(df2 %>% as.matrix())
x <- iris$Sepal.Length
y <- iris$Sepal.Width
z <- iris$Petal.Length
fig <- plot_ly(x = x, y = y, z = z)# %>% add_surface(df2)
fig
fig %>% add_surface(df2 %>% as.matrix())
fig <- plot_ly(x = x, y = y, z = z)# %>% add_surface(df2)
fig <- fig %>% add_surface(df2 %>% as.matrix())
fig
fig %>% add_surface(df2 %>% as.matrix())
z <- c(
c(8.83,8.89,8.81,8.87,8.9,8.87),
c(8.89,8.94,8.85,8.94,8.96,8.92),
c(8.84,8.9,8.82,8.92,8.93,8.91),
c(8.79,8.85,8.79,8.9,8.94,8.92),
c(8.79,8.88,8.81,8.9,8.95,8.92),
c(8.8,8.82,8.78,8.91,8.94,8.92),
c(8.75,8.78,8.77,8.91,8.95,8.92),
c(8.8,8.8,8.77,8.91,8.95,8.94),
c(8.74,8.81,8.76,8.93,8.98,8.99),
c(8.89,8.99,8.92,9.1,9.13,9.11),
c(8.97,8.97,8.91,9.09,9.11,9.11),
c(9.04,9.08,9.05,9.25,9.28,9.27),
c(9,9.01,9,9.2,9.23,9.2),
c(8.99,8.99,8.98,9.18,9.2,9.19),
c(8.93,8.97,8.97,9.18,9.2,9.18)
)
z
dim(z) <- c(15,6)
z
~z
~z
df2 %>% as.matrix()
fig <- plot_ly(showscale = FALSE)
fig <- fig %>% add_surface(z = df2 %>% as.matrix())
fig
#install.packages("plotly")
library(tidyverse)
install.packages("tidyverse")
#install.packages("plotly")
library(tidyverse)
data(iris)                            #   import data to R
model <-  lm("Petal.Length ~ Sepal.Length+Sepal.Width",
data = iris) #building linear regression, 2 X, 1 Y
model %>% summary() # get details of model
seq(1,100)
x <- seq(1,100)
y <- x**2
y
y <- (x-50)**2
y
y <- (x-50)**2 - 20
y
model <- glm(x,y)
c(x,y)
x %>% as.matrix()
x %>% as.data.frame()
df <- x %>% as.data.frame()
df$y <- y
df %>% summary()
model <- glm('y ~ x', data = df)
model %>% summary()
model <- glm('y ~ x', data = df, family = gaussian)
model %>% summary()
model <- glm('y ~ x', data = df, family = gaussian())
model %>% summary()
model <- glm('y ~ x', data = df, family = quasibinomial())
model %>% summary()
model <- glm('y ~ x', data = df, family = quasibinomial
model <- glm('y ~ x', data = df, family = quasibinomial
)
model <- glm('y ~ x', data = df, family = quasibinomial)
model <- glm('y ~ x', data = df, family = quasibinomial)
model <- glm('y ~ x', data = df, family = Gamma)
model <- glm('y ~ x', data = df, family = poission)
model <- glm('y ~ x', data = df, family = poisson)
model <- glm('y ~ x', data = df, family = quasi)
model %>% summary()
model <- glm(y ~ poly(x,2) )
model %>% summary()
library(data.table)
library(magrittr)
my_csv_files = list.files(pattern = '.csv')
my_csv_list = list()
for(i in 1:length(my_csv_files)) {
example = fread(my_csv_files[i],select = 'id')
my_csv_list[[i]] <- example
print(paste('Done',i,'out of',length(my_csv_files)))
rm(example,i)
gc()
}
df = rbindlist(my_csv_list)
rm(my_csv_list,my_csv_files)
num_of_dir = gsub('id_', '', list.dirs('imgs', F, F)) %>%
.[. %in% df$id]
my_csv_files = list.files(pattern = '.csv')
my_csv_files
setwd("~/intelligent_search")
my_csv_files = list.files(pattern = '.csv')
my_csv_files
my_csv_list = list()
my_csv_list
for(i in 1:length(my_csv_files)) {
example = fread(my_csv_files[i],select = 'id')
my_csv_list[[i]] <- example
print(paste('Done',i,'out of',length(my_csv_files)))
rm(example,i)
gc()
}
df = rbindlist(my_csv_list)
df
example = fread(my_csv_files[i],select = 'Id')
example = fread(my_csv_files[i],select = 'id')
library(data.table)
library(magrittr)
my_csv_files = list.files(pattern = '.csv')
my_csv_files
my_csv_list = list()
length(my_csv_files)
fread(my_csv_files[i],select = 'id')
fread(my_csv_files[1],select = 'id')
fread(my_csv_files[1])
example = fread(my_csv_files[i],select = 'photo_id')
for(i in 1:length(my_csv_files)) {
example = fread(my_csv_files[i],select = 'photo_id')
my_csv_list[[i]] <- example
print(paste('Done',i,'out of',length(my_csv_files)))
rm(example,i)
gc()
}
df = rbindlist(my_csv_list)
rm(my_csv_list,my_csv_files)
num_of_dir = gsub('id_', '', list.dirs('imgs', F, F)) %>%
.[. %in% df$id]
reticulate::py_install('--no-deps git+https://github.com/openai/CLIP.git',pip = T)
install.packages('reticulate')
reticulate::py_install('--no-deps git+https://github.com/openai/CLIP.git',pip = T)
Y
res=list.files('numpy/features',pattern = '.csv',full.names = T)
data.table::fread(res[1])
res
library(data.table)
library(magrittr)
my_csv_files = list.files(pattern = '.csv')
my_csv_list = list()
for(i in 1:length(my_csv_files)) {
example = fread(my_csv_files[i],select = 'id')
my_csv_list[[i]] <- example
print(paste('Done',i,'out of',length(my_csv_files)))
rm(example,i)
gc()
}
plot(cars)
library(data.table)
library(magrittr)
my_csv_files = list.files(pattern = '.csv')
my_csv_list = list()
for(i in 1:length(my_csv_files)) {
example = fread(my_csv_files[i],select = 'id')
my_csv_list[[i]] <- example
print(paste('Done',i,'out of',length(my_csv_files)))
rm(example,i)
gc()
}
